
// void  *auth(void *arg)
// {
//   int i;

//   i = 0;
//   printf("Authentication ...\n");
//   while (i != 3)
//   {
//     sleep(1);

//     ++i;
//   }
// }

  // int     auth_pass;


    // tbuf[tlen] = 0;
    // printf("tlen=%d\n", tlen);
    // int g = 0;
    // while (g != tlen)
    // {
    //   if (tbuf[g] == '\n')
    //     printf("[%d]('\\n' code - %d) ", g, tbuf[g]);
    //   else
    //     printf("[%d]('%c' code - %d) ", g, tbuf[g], tbuf[g]);
    //   ++g;
    // }
    // printf("\n");
  // pthread_create(&th1, NULL, auth, NULL);
// Starting authentication process. Waiting for server

  // printf(" ! tlen=[%d]\n", buf.tlen);
    // printf(" X plen=%d\n", buf.plen);
    // printf("char='%c', index = %d(%d)\n", buf.tbuf[buf.tlen - 1], buf.tlen - 1, buf.tbuf[buf.tlen - 1]);
    // printf("char='%c', index = %d(%d)\n", buf.tbuf[buf.tlen], buf.tlen, buf.tbuf[buf.tlen]);


printf(" X tlen=%d\n", buf->tlen);

int     screen_update(t_bufs *buf, int fds)
{
  t_su  su;

printf(" X plen=%d\n", buf->plen);
  su.i = 0;
  su.t = 0;
  if ((su.i = pbuf_process(buf->pbuf, buf->tbuf, &buf->plen, buf->tlen)) == -1)
    return (0);
  while (su.i < buf->tlen)
  {
    while (su.i != buf->tlen && buf->tbuf[su.i] != '\n')
      ++su.i;
    if (su.i != buf->tlen)
    {
      if (bp_guide(1, buf, fds, &su) == -1)
        return (0);
      cmd_process(su.rbuf);
      su.t = su.i + 1;
      ++su.i;
    }
    else if ((buf->plen = buf_process(&buf->pbuf[buf->plen], &buf->tbuf[su.t], buf->plen, su.i)) == -1)
      return (0);
  }
  return (buf->plen);
}

nt               client_prompt(t_pm *pm)
{
  int             sret;
  int             pret;
  t_bufs          buf;
  fd_set          fd_rs;
  pthread_mutex_t lock;
  pthread_t       th1;

  lock = PTHREAD_MUTEX_INITIALIZER;
  buf.plen = 0;
  FD_ZERO(&fd_rs);
  FD_SET(pm->sfd, &fd_rs);
  if ((pret = pthread_create(&th1, NULL, authentification, pm->auth)) != 0)
    return (pc_error(pret));
  while (42) // Bus error
  {
    if (sret = select_monitore(&fd_rs, buf, pm) == 0)
      return (1);
    if (sret == -1)
      return (-1);
    screen_update(&buf, pm->sfd, (void*)&fd_rs);
  }
  return (0);
}
libc6-dev

int main(int argc, char const *argv[])
{
  ++argc;
  ++argv[0];
  return 0;
}
